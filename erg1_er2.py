# # Συνάρτηση για τον υπολογισμό του παραγοντικού ενός αριθμού
def factorial(num):
    if num == 0 or num == 1:
        return 1
    else:
        return num * factorial(num - 1)

# Ορίστε τις τιμές για τα lambda και mu
lambda_val = 0.5
mu_val = 1

# Καθορισμός του μέγιστου αριθμού πελατών στην ουρά αναμονής
max_customers = 10

# Ορίστε τη λίστα πιθανοτήτων κατάστασης
state_probabilities = []

# Υπολογίστε τον συντελεστή χρήσης
rho = lambda_val / mu_val

# Υπολογίστε την πιθανότητα να υπάρχουν 0 πελάτες στο σύστημα.
p0 = 1 - rho
for i in range(0, max_customers+1):
    # Υπολογίστε την πιθανότητα i πελατών στο σύστημα
    pi = (rho ** i * p0) / factorial(i)
    state_probabilities.append(pi)

# Εκτυπώστε τις πιθανότητες κατάστασης
print("Πιθανότητες Κατάστασης:")
for i in range(0, len(state_probabilities)):
    print(f"P{i}: {state_probabilities[i]}")


#Σε αυτό το πρόγραμμα υπάρχουν πελάτες σε μια ουρά που περιμένουν να εξυπηρετηθούν. Το πρόγραμμα προσπαθεί να υπολογίσει πόσοι πελάτες θα υπάρχουν στην ουρά σε κάθε δεδομένη στιγμή και πόσο πιθανό είναι να υπάρχει ένας συγκεκριμένος αριθμός πελατών.

#Αρχικά, το πρόγραμμα εξετάζει πόσο γρήγορα φτάνουν οι πελάτες και πόσο γρήγορα εξυπηρετούνται. Στη συνέχεια, υπολογίζει έναν ειδικό αριθμό που ονομάζεται "συντελεστής χρησιμοποίησης" και ο οποίος βοηθά να υπολογίσει πόσο απασχολημένη θα είναι η γραμμή.

#Έπειτα, το πρόγραμμα υπολογίζει πόσο πιθανό είναι να υπάρχουν μηδενικοί πελάτες στη γραμμή και στη συνέχεια εξετάζει όλους τους πιθανούς αριθμούς πελατών που θα μπορούσαν να βρίσκονται στη γραμμή (μέχρι έναν μέγιστο αριθμό). Για κάθε πιθανό αριθμό, το πρόγραμμα υπολογίζει πόσο πιθανό είναι να υπάρχουν τόσοι πελάτες στην ουρά.

#Τέλος, το πρόγραμμα εκτυπώνει έναν κατάλογο με όλους τους πιθανούς αριθμούς πελατών και το πόσο πιθανό είναι να υπάρχουν τόσοι πελάτες στην ουρά.

#Εν συντομία, αυτό το πρόγραμμα είναι σαν ένα παιχνίδι όπου ο στόχος είναι να υπολογιστεί πόσο απασχολημένη θα είναι μια ουρά και πόσο πιθανό είναι να έχει έναν συγκεκριμένο αριθμό πελατών.
